#for future use




def empty_remember():
            file1 = open('remember.txt', 'r+')
            file1.truncate(0) 
            file1.write("{0},".format(str(0)))
            file1.close()

        itrt=0        
        filter1 = st.multiselect(
            'Col A',
            ['option1', 'option2','option3'],#on_change=empty_remember(),
        )

        filter2 = st.multiselect(
            'Col B',
            ['option1', 'option2','option3'],#on_change=empty_remember(),
            )


        #-----------------------

        #table
        
        try: 
            #create connection with database
            conn = psycopg2.connect(database ="streamlit_project", user = "postgres",
                                        password = "1234",port = "5432")

            #create cursor of connection
            cur = conn.cursor()

            #get values for filter 
            qf3 = """select audio_type from mydata ;"""
            cur.execute(qf3,(filter1,filter2,))
            f_3 = cur.fetchall()
            f3=list(set(f_3))

            
            filter3 = st.multiselect(
                'Audio Type',
                f3,#on_change=empty_remember(),
                )


            
                

            #get values for filter 
            query = """select * from mydata where (col_a=ANY(%s) or col_b=ANY(%s)) and audio_type= ANY(%s) order by last_updated desc;"""
            cur.execute(query,(filter1,filter2,filter3))
            data = cur.fetchall()
            
            all=[]


            


            #show data to the screen
            if data:
                #all=[]
                for i in data: 
                    l=[]
                    for j in i:
                        l.append(j)
                    all.append(l)

                
            def next(itrtf):
                global itrt

                
                
                    
                st.write("----------------------------------------------------------------------------------")
                
                for r in range(1):
                        table = "<html>"
                        table += "<table>\n"
                        table +="<tr>\n"
                        for i in all[itrtf]:
                            table += "<td>{0}</td>\n".format(i)
                        table += "</tr>\n"
                table += "</table>"
                table += "</html>"
                st.write(table, unsafe_allow_html=True )



                #update last updated time in record   
                btn="Update"+"-->"+str(itrtf+1)
                if st.button(btn):
                    #update last_modified
                    query2 = """update mydata set col_a=%s where id=%s;"""
                    p,q=str(all[itrtf][2]),str(all[itrtf][0])

                    cur.execute(query2,(p,q))
                    #commit the changes
                    conn.commit()
                    st.write(" updated --->"+str(itrtf+1))
                else:
                    st.write('Click to Update')
                itrt=itrtf+1
                
            
            
            
            
                
            if data:        
                if st.button("Next Data"):
                    st.write("Explore")
                    file2 = open('remember.txt', 'r')
                    data = file2.read()
                    dt=data.split(',')
                    dt = dt[:-1]
                    st.write(int(dt[-1]))
                    next(int(dt[-1]))
                    file2.close()
                    
                    
                    file3 = open('remember.txt', 'a')
                    file3.write("{0},".format(str(itrt)))
                    file3.close()
                    
                    
                    st.write(itrt)
                else:
                    st.write('Click to Explore')
            else:
                st.write('No data to show')    
            

        except(Exception, psycopg2.DatabaseError) as error:
            st.write(error)
        finally:
            if conn is not None:
                conn.close()
